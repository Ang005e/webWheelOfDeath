@using LibWheelOfDeath
@using System.Data
@using Microsoft.Data.SqlClient
@using LibEntity

@*
    TODO: SEPERATE YOUR CONCERNS, DUMBLEDOOR
    (remove webWheelOfDeath reference and code, move to model)
*@

@model webWheelOfDeath.Models.CGameUser;


@*
    TODO:
    convert to partial views:
        ~~Login~~
        ~~Game~~
    Check which one to load based on session variable with user ID stored in it
*@

@{
    ViewData["Title"] = "Home Page";
}

<!--
Date: 2020-23
Author: Ramin Majidi
Purpose: This and all other code elements of this project (unless otherwise commented) are the work of the
author and may be used for TAFE Assessment purposes only.
-->
<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport"
    content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0" />
    <title>Wheel of Death</title>
    <link href="pics/Wheel_of_Death.png" rel="icon" />
    <link rel="stylesheet" href="/css/lib/modal.css" />
    <link rel="stylesheet" href="/css/animations.css" />
    <link rel="stylesheet" href="/css/statusPanel.css" />
    <link rel="stylesheet" href="/css/theme.css" />
</head>

<body class="shadow-text">
    <header>
        <img class="logo"
        src="pics/Wheel_of_Death_Logo.png"
        alt="Wheel of Death"
        height="159"
        width="667" />
    </header>

    <main>
        <div>
            <div id="knife-gallery"></div>

            <img src="pics/Left_Thrower.png"
            class="knife_thrower"
            alt="Knife thrower on left"
            height="2566"
            width="1887" />

            <div class="wheel-outer-frame">
                <figure class="wheel-inner-frame">
                    <img id="wheel"
                    src="pics/Wheel.jpg"
                    alt="Wheel of Death"
                    height="2820"
                    width="2820" />

                    <div id="victim">
                        <img class="big-knife hidden" src="pics/Knife-Angled.png" alt="killer knife" />
                    </div>
                    <div id="below-the-belt">&nbsp;</div>
                </figure>

            </div>

            <img src="pics/Right_Thrower.png"
            class="knife_thrower"
            alt="Knife thrower on right"
            height="2669"
            width="1648" />
        </div>

        <button id="btnStartStop" name="btnStartStop" type="button" class="ornate rounded">Start</button>

        <div class="time-panel" id="time-panel-1">

            <span class="countdown-max-seconds"></span>
            <meter class="countdown-gauge" min="0" value="0" max="30000"></meter>
            <span>0</span>
            <span class="countdown-remaining"></span>
        </div>

        <h2 id="scorePanel">&nbsp;</h2>

        <div id="statusPanel" class="hidden stopped">&nbsp;</div>
    </main>

    <footer>
        Copyright &copy; 2020-24 SRT - Author: Ramin Majidi
    </footer>

    <!-- The following div elements act as a modal canvas for pop-up messages -->
    <div id="modal-message-id" class="modal-canvas hidden">
        <div class="main-panel modal-error">
            <span class="close-popup">&#10006;</span>
            <p class="message-display">&nbsp;</p>
        </div>
    </div>


    <!-- create a form tag (could just use HTML, but this helps keep things in sync, i.e. when refactoring) -->
    @*@using (Html.BeginForm())
        {
        <p>
            Html.TextAreaFor(x => x.Body)
        </p>
        }*@


    <!--
    TROUBLESHOOTING STEPS:
    0. debug using browser breakpoints.
    0.5 debug using serverside breakpoints.
    1. clear browser cashe.
    2. delete project .vs hidden file.
    3. use ClearModelState is server side code.
    4. Check that AJAX is correctly intercepting the form submission and preventing the default action.
    6. Check that the form is not submitting (it's the button, fix the submit button and event.preventDefault).
    7. check that the form IS submitting (remove event.preventDefault)
    8. make sure that the events are being attached properly to server side
    HTML

    -->
     
        @{
        string? loggedUserId = Context.Session.GetString("user-id");
        }
        @if ( ! string.IsNullOrWhiteSpace(loggedUserId))
        {

			// ToDo: Convert other pages to partial views too.
			// NOTE: Minimise server traffic. But keep in mind that the server also sends the HTML anyway, so not too much difference lol!

            <div id="modal-game-selection-id" class="modal-canvas hidden">
                <div class="main-panel modal-player">
                    <span class="close-popup">&#10006;</span>
                    <form>
                        <fieldset>
                            <fieldset>
                                <label for="cboGameSelect">Select Game Mode</label>
                                <select name="cboGameSelect" id="cboGameSelect">
                                    @{
                                        string sql = @"
                            select
                            G.[Id], G.[Game], G.[FkDifficultyId], D.[Difficulty], D.[Id]
                            from
                            tblGame G inner join
                            tblDifficulty D on D.[Id] = G.[FkDifficultyId]
                            where
                            (1=1)
                            order by
                            D.[Id],
                            G.[Game]
                            ";
                                        DataTable table = sql.Fetch<DataTable>();
                                        DataRow row = table.Rows[0];
                                        int counter = 0;

                                        while (counter < table.Rows.Count)
                                        {
                                            string? difficultyName = row.Field<string>("Difficulty") ?? "";

                                            long difficultyId = row.Field<long>("FkDifficultyId"); ;
                                            long lastDifficultyId = difficultyId;

                                            if (difficultyName == "") break;

                                            <optgroup label="@difficultyName">
                                                @{
                                                    while ((difficultyId == lastDifficultyId) && (counter < table.Rows.Count))
                                                    {
                                                        row = table.Rows[counter];
                                                        difficultyId = row.Field<long>("FkDifficultyId");
                                                        string? gameName = row.Field<string>("Game") ?? "";

                                                        if (gameName == "") break;

                                                        <option>@gameName</option>

                                                        difficultyId = row.Field<long>("FkDifficultyId");

                                                        counter++;
                                                    }
                                                    lastDifficultyId = difficultyId;
                                                }
                                            </optgroup>
                                        }
                                    }

                                </select>
                            </fieldset>
                        </fieldset>
                        <button type="button" name="btnConfirm" id="btnBeginGame" class="ornate">Confirm</button>
                    </form>
                </div>
            </div>

            <div id="modal-winner-id" class="modal-canvas hidden">
                <div class="main-panel modal-winner">
                    <span class="close-popup">&#10006;</span>
                    <form>
                        <fieldset>
                            <legend>Congratulations - You Won!</legend>

                            <label for="numElapsedTime">Your Time (sec):</label>
                            <output name="numElapsedTime" id="numElapsedTime"></output>

                            <label for="numHits">Hits:</label>
                            <output name="numHits" id="numHits"></output>

                            <label for="numMisses">Misses:</label>
                            <output name="numMisses" id="numMisses"></output>

                            <output name="txtMiscMessage"></output>
                        </fieldset>
                    </form>
                </div>
            </div>

            <script type="module" defer="defer">
            'use strict';

            let _game;

            try {

                // get duration, throws, min and max balloons from session variable set in controller.
                _game = new CWheelGame('@Context.Session.GetString("user-name")', 10000, 2, 10, 20);

                    document.addEventListener('game-over', event => {
                        console.log(`Status: ${event.detail.gameStatus} Elapsed: ${event.detail.elapsed}`);
                    });

            } catch (e) {
                    new CMessageModal('#modal-message-id').display(e.message, false, 7000);
                }
            </script>
            
        }
        else
        {
            <div id="modal-login-id" class="modal-canvas"> <!-- hidden"> -->
                @await Html.PartialAsync("_LoginPartial", new CGameUser())
            </div>

            <div id="modal-register-id" class="modal-canvas hidden">
                @await Html.PartialAsync("_Register", new CGameUser())
            </div>
        }
    <script type="module" defer="defer">
        import { CAccountPopups } from "/js/CAccountPopups.js"

		let popups = new CAccountPopups();

                $(document).ready(function () {
            // delegate the event to the document so that the
            // handler is not lost when the element it targets is reloaded
            $(document).on("submit", "#modal-register-id form", function (event) {
                event.preventDefault(); // Prevent the default form submission

                // ToDo: replace with Javascript fetch
                $.ajax({
                    url: '/Login',  // URL to the Login action
                    type: 'POST',
                    data: $(this).serialize(),  // Serialize the form data
                    success: function (result) {
                        // Update the modal content with the returned partial view HTML
                        $("#modal-login-id").html(result);
                        document.dispatchEvent(new CustomEvent("partial-refresh", {
                            bubbles: true,
                            detail:
                            {
                                form: "login-form"
                            }
                        }));
                    },
                    error: function () {
                        alert("There was an error processing your request.");
                    }
                });
            });
            $(document).on("submit", "#modal-login-id form", function (event) {
                event.preventDefault();

    </script>
    
</body>

</html>
